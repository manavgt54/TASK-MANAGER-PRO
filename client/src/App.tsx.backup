import React, { useState, useEffect } from 'react'
import './App.css'

// Types
interface Task {
  id: number
  title: string
  description: string
  completed: boolean
  dueDate: string
  list: string
  tags: string[]
  subtasks: Subtask[]
  createdAt: string
}

interface Subtask {
  id: number
  title: string
  completed: boolean
}

interface List {
  id: number
  name: string
  color: string
  taskCount: number
}

interface Tag {
  id: number
  name: string
  color: string
}

// API functions
const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:4000'

const api = {
  async request(endpoint: string, options: RequestInit = {}) {
    const token = localStorage.getItem('token')
    const response = await fetch(`${API_BASE}${endpoint}`, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...(token && { Authorization: `Bearer ${token}` }),
        ...options.headers,
      },
    })
    
    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`)
    }
    
    return response.json()
  },

  // Auth
  async login(email: string, password: string) {
    return this.request('/api/auth/login', {
      method: 'POST',
      body: JSON.stringify({ email, password }),
    })
  },

  async register(email: string, password: string) {
    return this.request('/api/auth/register', {
      method: 'POST',
      body: JSON.stringify({ email, password }),
    })
  },

  // Tasks
  async getTasks() {
    return this.request('/api/tasks')
  },

  async createTask(task: Partial<Task>) {
    return this.request('/api/tasks', {
      method: 'POST',
      body: JSON.stringify(task),
    })
  },

  async updateTask(id: number, task: Partial<Task>) {
    return this.request(`/api/tasks/${id}`, {
      method: 'PUT',
      body: JSON.stringify(task),
    })
  },

  async deleteTask(id: number) {
    return this.request(`/api/tasks/${id}`, {
      method: 'DELETE',
    })
  },

  // Forgot password
  async forgotPassword(email: string) {
    return this.request('/api/auth/forgot-password', {
      method: 'POST',
      body: JSON.stringify({ email }),
    })
  },

  async verifyOTP(email: string, otp: string) {
    return this.request('/api/auth/verify-otp', {
      method: 'POST',
      body: JSON.stringify({ email, otp }),
    })
  },

  async resetPassword(resetToken: string, newPassword: string) {
    return this.request('/api/auth/reset-password', {
      method: 'POST',
      body: JSON.stringify({ resetToken, newPassword }),
    })
  },
}

function App() {
  // Auth state
  const [token, setToken] = useState<string | null>(localStorage.getItem('token'))
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [mode, setMode] = useState<'login' | 'register' | 'forgot-password' | 'verify-otp' | 'reset-password'>('login')
  const [loading, setLoading] = useState(false)
  
  // Forgot password state
  const [otp, setOtp] = useState('')
  const [newPassword, setNewPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [resetToken, setResetToken] = useState('')

  // Task management state
  const [tasks, setTasks] = useState<Task[]>([])
  const [selectedTask, setSelectedTask] = useState<Task | null>(null)
  const [selectedList, setSelectedList] = useState('Today')
  const [searchQuery, setSearchQuery] = useState('')
  
  // Lists and tags
  const [lists, setLists] = useState<List[]>([
    { id: 1, name: 'Personal', color: 'bg-red-500', taskCount: 3 },
    { id: 2, name: 'Work', color: 'bg-blue-500', taskCount: 6 },
    { id: 3, name: 'List 1', color: 'bg-yellow-500', taskCount: 3 },
  ])
  
  const [tags, setTags] = useState<Tag[]>([
    { id: 1, name: 'Tag 1', color: 'bg-pink-200' },
    { id: 2, name: 'Tag 2', color: 'bg-red-200' },
  ])

  // New task form
  const [newTaskTitle, setNewTaskTitle] = useState('')
  const [newTaskDescription, setNewTaskDescription] = useState('')
  const [newTaskList, setNewTaskList] = useState('Personal')
  const [newTaskDueDate, setNewTaskDueDate] = useState('')
  const [newTaskTags, setNewTaskTags] = useState<string[]>([])

  // Load tasks on mount
  useEffect(() => {
    if (token) {
      loadTasks()
    }
  }, [token])

  const loadTasks = async () => {
    try {
      const data = await api.getTasks()
      setTasks(data)
    } catch (error) {
      console.error('Failed to load tasks:', error)
    }
  }

  // Auth handlers
  const handleAuthSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    
    try {
      const data = mode === 'login' 
        ? await api.login(email, password)
        : await api.register(email, password)
      
      localStorage.setItem('token', data.token)
      setToken(data.token)
    } catch (error) {
      alert('Authentication failed')
    } finally {
      setLoading(false)
    }
  }

  const handleLogout = () => {
    localStorage.removeItem('token')
    setToken(null)
    setSelectedTask(null)
  }

  // Forgot password handlers
  const handleForgotPassword = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    
    try {
      await api.forgotPassword(email)
      alert('If the email exists, an OTP has been sent to your email address.')
      setMode('verify-otp')
    } catch (error) {
      alert('Failed to send OTP. Please try again.')
    } finally {
      setLoading(false)
    }
  }

  const handleVerifyOTP = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    
    try {
      const data = await api.verifyOTP(email, otp)
      setResetToken(data.resetToken)
      setMode('reset-password')
    } catch (error) {
      alert('Invalid or expired OTP. Please try again.')
    } finally {
      setLoading(false)
    }
  }

  const handleResetPassword = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (newPassword !== confirmPassword) {
      alert('Passwords do not match')
      return
    }
    
    if (newPassword.length < 6) {
      alert('Password must be at least 6 characters long')
      return
    }
    
    setLoading(true)
    
    try {
      await api.resetPassword(resetToken, newPassword)
      alert('Password reset successfully! Please login with your new password.')
      setMode('login')
      setEmail('')
      setPassword('')
      setOtp('')
      setNewPassword('')
      setConfirmPassword('')
      setResetToken('')
    } catch (error) {
      alert('Failed to reset password. Please try again.')
    } finally {
      setLoading(false)
    }
  }

  // Task handlers
  const handleCreateTask = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!newTaskTitle.trim()) return

    try {
      const task = await api.createTask({
        title: newTaskTitle,
        description: newTaskDescription,
        list: newTaskList,
        dueDate: newTaskDueDate,
        tags: newTaskTags,
        completed: false,
        subtasks: [],
      })
      
      setTasks([...tasks, task])
      setNewTaskTitle('')
      setNewTaskDescription('')
      setNewTaskDueDate('')
      setNewTaskTags([])
    } catch (error) {
      console.error('Failed to create task:', error)
    }
  }

  const handleUpdateTask = async (task: Task) => {
    try {
      const updatedTask = await api.updateTask(task.id, task)
      setTasks(tasks.map(t => t.id === task.id ? updatedTask : t))
      setSelectedTask(updatedTask)
    } catch (error) {
      console.error('Failed to update task:', error)
    }
  }

  const handleDeleteTask = async (id: number) => {
    try {
      await api.deleteTask(id)
      setTasks(tasks.filter(t => t.id !== id))
      if (selectedTask?.id === id) {
        setSelectedTask(null)
      }
    } catch (error) {
      console.error('Failed to delete task:', error)
    }
  }

  const handleToggleTask = async (task: Task) => {
    const updatedTask = { ...task, completed: !task.completed }
    await handleUpdateTask(updatedTask)
  }

  const handleAddSubtask = (taskId: number, subtaskTitle: string) => {
    const task = tasks.find(t => t.id === taskId)
    if (!task) return

    const newSubtask: Subtask = {
      id: Date.now(),
      title: subtaskTitle,
      completed: false,
    }

    const updatedTask = {
      ...task,
      subtasks: [...task.subtasks, newSubtask]
    }

    handleUpdateTask(updatedTask)
  }

  const handleToggleSubtask = (taskId: number, subtaskId: number) => {
    const task = tasks.find(t => t.id === taskId)
    if (!task) return

    const updatedTask = {
      ...task,
      subtasks: task.subtasks.map(st => 
        st.id === subtaskId ? { ...st, completed: !st.completed } : st
      )
    }

    handleUpdateTask(updatedTask)
  }

  // Filter tasks based on selected list and search
  const filteredTasks = tasks.filter(task => {
    const matchesList = selectedList === 'Today' ? true : task.list === selectedList
    const matchesSearch = task.title.toLowerCase().includes(searchQuery.toLowerCase())
    return matchesList && matchesSearch
  })

  // Login/Register UI
  if (!token) {
    return (
      <div className="min-h-screen relative overflow-hidden" style={{
        backgroundImage: "linear-gradient(to bottom, #312e81, #6b21a8, #a21caf), url('/stars.svg')",
        backgroundSize: 'cover',
        backgroundPosition: 'center',
      }}>
        <div className="relative z-10 flex items-center justify-center p-8 min-h-screen">
          <div className="w-[520px] min-h-[520px] mx-auto backdrop-blur-xl rounded-3xl border border-white/10 bg-white/10 shadow-[0_10px_40px_-10px_rgba(0,0,0,0.6)] p-10 text-white">
            <h1 className="text-4xl font-extrabold tracking-tight text-center mb-2">Login</h1>
            <p className="mt-1 text-center text-white/70 mb-8">{mode === 'login' ? 'Welcome back' : 'Create your account'}</p>

            <form onSubmit={handleAuthSubmit} className="space-y-6 w-[440px] mx-auto">
              <div>
                <div className="relative">
                  <span className="absolute inset-y-0 left-4 grid place-items-center text-white/60">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M20 21a8 8 0 1 0-16 0"/><circle cx="12" cy="7" r="4"/></svg>
                  </span>
                  <input value={email} onChange={e => setEmail(e.target.value)} type="email" required placeholder="Email" className="h-12 pl-12 pr-4 w-full rounded-full border border-white/30 bg-white/5 placeholder-white/60 text-white focus:border-fuchsia-300 focus:ring-2 focus:ring-fuchsia-300/40" />
                </div>
              </div>
              <div>
                <div className="relative">
                  <span className="absolute inset-y-0 left-4 grid place-items-center text-white/60">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect x="3" y="11" width="18" height="11" rx="2"/><path d="M7 11V7a5 5 0 0 1 10 0v4"/></svg>
                  </span>
                  <input value={password} onChange={e => setPassword(e.target.value)} type="password" required placeholder="Password" className="h-12 pl-12 pr-4 w-full rounded-full border border-white/30 bg-white/5 placeholder-white/60 text-white focus:border-fuchsia-300 focus:ring-2 focus:ring-fuchsia-300/40" />
                </div>
              </div>

              <div className="flex items-center justify-between text-sm text-white/80 mt-4">
                <label className="inline-flex items-center gap-2">
                  <input type="checkbox" className="h-4 w-4 rounded border-white/30 bg-white/10 text-fuchsia-400 focus:ring-fuchsia-300" />
                  Remember me
                </label>
                <button 
                  type="button" 
                  onClick={() => setMode('forgot-password')}
                  className="hover:underline"
                >
                  Forgot password?
                </button>
              </div>

              <button disabled={loading} className="w-full h-12 rounded-full font-semibold bg-gradient-to-r from-fuchsia-600 to-indigo-600 text-white shadow-lg shadow-fuchsia-500/30 hover:shadow-fuchsia-400/40 transition disabled:opacity-60 mt-6">
                {loading ? 'Please wait...' : (mode === 'login' ? 'Login' : 'Create account')}
              </button>
            </form>

            <div className="text-sm text-center text-white/80 mt-8">
              {mode === 'login' ? (
                <button onClick={() => setMode('register')} className="font-semibold text-white hover:underline">Don't have an account? Register</button>
              ) : (
                <button onClick={() => setMode('login')} className="font-semibold text-white hover:underline">Already have an account? Login</button>
              )}
            </div>
          </div>
        </div>
      </div>
    )
  }

  // Forgot Password UI
  if (mode === 'forgot-password') {
    return (
      <div className="min-h-screen relative overflow-hidden" style={{
        backgroundImage: "linear-gradient(to bottom, #312e81, #6b21a8, #a21caf), url('/stars.svg')",
        backgroundSize: 'cover',
        backgroundPosition: 'center',
      }}>
        <div className="relative z-10 flex items-center justify-center p-8 min-h-screen">
          <div className="w-[520px] min-h-[520px] mx-auto backdrop-blur-xl rounded-3xl border border-white/10 bg-white/10 shadow-[0_10px_40px_-10px_rgba(0,0,0,0.6)] p-10 text-white">
            <h1 className="text-4xl font-extrabold tracking-tight text-center mb-2">Forgot Password</h1>
            <p className="mt-1 text-center text-white/70 mb-8">Enter your email to receive a reset code</p>

            <form onSubmit={handleForgotPassword} className="space-y-6 w-[440px] mx-auto">
              <div>
                <div className="relative">
                  <span className="absolute inset-y-0 left-4 grid place-items-center text-white/60">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M20 21a8 8 0 1 0-16 0"/><circle cx="12" cy="7" r="4"/></svg>
                  </span>
                  <input value={email} onChange={e => setEmail(e.target.value)} type="email" required placeholder="Email" className="h-12 pl-12 pr-4 w-full rounded-full border border-white/30 bg-white/5 placeholder-white/60 text-white focus:border-fuchsia-300 focus:ring-2 focus:ring-fuchsia-300/40" />
                </div>
              </div>

              <button disabled={loading} className="w-full h-12 rounded-full font-semibold bg-gradient-to-r from-fuchsia-600 to-indigo-600 text-white shadow-lg shadow-fuchsia-500/30 hover:shadow-fuchsia-400/40 transition disabled:opacity-60 mt-6">
                {loading ? 'Sending...' : 'Send Reset Code'}
              </button>
            </form>

            <div className="text-sm text-center text-white/80 mt-8">
              <button onClick={() => setMode('login')} className="font-semibold text-white hover:underline">Back to Login</button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // Verify OTP UI
  if (mode === 'verify-otp') {
    return (
      <div className="min-h-screen relative overflow-hidden" style={{
        backgroundImage: "linear-gradient(to bottom, #312e81, #6b21a8, #a21caf), url('/stars.svg')",
        backgroundSize: 'cover',
        backgroundPosition: 'center',
      }}>
        <div className="relative z-10 flex items-center justify-center p-8 min-h-screen">
          <div className="w-[520px] min-h-[520px] mx-auto backdrop-blur-xl rounded-3xl border border-white/10 bg-white/10 shadow-[0_10px_40px_-10px_rgba(0,0,0,0.6)] p-10 text-white">
            <h1 className="text-4xl font-extrabold tracking-tight text-center mb-2">Verify Code</h1>
            <p className="mt-1 text-center text-white/70 mb-8">Enter the 6-digit code sent to {email}</p>

            <form onSubmit={handleVerifyOTP} className="space-y-6 w-[440px] mx-auto">
              <div>
                <div className="relative">
                  <span className="absolute inset-y-0 left-4 grid place-items-center text-white/60">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect x="3" y="11" width="18" height="11" rx="2"/><path d="M7 11V7a5 5 0 0 1 10 0v4"/></svg>
                  </span>
                  <input value={otp} onChange={e => setOtp(e.target.value)} type="text" required placeholder="Enter 6-digit code" maxLength={6} className="h-12 pl-12 pr-4 w-full rounded-full border border-white/30 bg-white/5 placeholder-white/60 text-white focus:border-fuchsia-300 focus:ring-2 focus:ring-fuchsia-300/40 text-center text-2xl tracking-widest" />
                </div>
              </div>

              <button disabled={loading} className="w-full h-12 rounded-full font-semibold bg-gradient-to-r from-fuchsia-600 to-indigo-600 text-white shadow-lg shadow-fuchsia-500/30 hover:shadow-fuchsia-400/40 transition disabled:opacity-60 mt-6">
                {loading ? 'Verifying...' : 'Verify Code'}
              </button>
            </form>

            <div className="text-sm text-center text-white/80 mt-8">
              <button onClick={() => setMode('forgot-password')} className="font-semibold text-white hover:underline">Back to Forgot Password</button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // Reset Password UI
  if (mode === 'reset-password') {
    return (
      <div className="min-h-screen relative overflow-hidden" style={{
        backgroundImage: "linear-gradient(to bottom, #312e81, #6b21a8, #a21caf), url('/stars.svg')",
        backgroundSize: 'cover',
        backgroundPosition: 'center',
      }}>
        <div className="relative z-10 flex items-center justify-center p-8 min-h-screen">
          <div className="w-[520px] min-h-[520px] mx-auto backdrop-blur-xl rounded-3xl border border-white/10 bg-white/10 shadow-[0_10px_40px_-10px_rgba(0,0,0,0.6)] p-10 text-white">
            <h1 className="text-4xl font-extrabold tracking-tight text-center mb-2">Reset Password</h1>
            <p className="mt-1 text-center text-white/70 mb-8">Enter your new password</p>

            <form onSubmit={handleResetPassword} className="space-y-6 w-[440px] mx-auto">
              <div>
                <div className="relative">
                  <span className="absolute inset-y-0 left-4 grid place-items-center text-white/60">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect x="3" y="11" width="18" height="11" rx="2"/><path d="M7 11V7a5 5 0 0 1 10 0v4"/></svg>
                  </span>
                  <input value={newPassword} onChange={e => setNewPassword(e.target.value)} type="password" required placeholder="New Password" className="h-12 pl-12 pr-4 w-full rounded-full border border-white/30 bg-white/5 placeholder-white/60 text-white focus:border-fuchsia-300 focus:ring-2 focus:ring-fuchsia-300/40" />
                </div>
              </div>

              <div>
                <div className="relative">
                  <span className="absolute inset-y-0 left-4 grid place-items-center text-white/60">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect x="3" y="11" width="18" height="11" rx="2"/><path d="M7 11V7a5 5 0 0 1 10 0v4"/></svg>
                  </span>
                  <input value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)} type="password" required placeholder="Confirm New Password" className="h-12 pl-12 pr-4 w-full rounded-full border border-white/30 bg-white/5 placeholder-white/60 text-white focus:border-fuchsia-300 focus:ring-2 focus:ring-fuchsia-300/40" />
                </div>
              </div>

              <button disabled={loading} className="w-full h-12 rounded-full font-semibold bg-gradient-to-r from-fuchsia-600 to-indigo-600 text-white shadow-lg shadow-fuchsia-500/30 hover:shadow-fuchsia-400/40 transition disabled:opacity-60 mt-6">
                {loading ? 'Resetting...' : 'Reset Password'}
              </button>
            </form>

            <div className="text-sm text-center text-white/80 mt-8">
              <button onClick={() => setMode('login')} className="font-semibold text-white hover:underline">Back to Login</button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // Main Task Management UI
  return (
    <div className="min-h-screen bg-gray-50 flex">
      {/* Left Sidebar */}
      <div className="w-80 bg-white border-r border-gray-200 flex flex-col">
        {/* Header */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-bold text-gray-800">Menu</h2>
            <button className="p-2 hover:bg-gray-100 rounded-lg">
              <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
          </div>
        </div>

        {/* Search */}
        <div className="p-6 border-b border-gray-200">
          <div className="relative">
            <svg className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
            <input
              type="text"
              placeholder="Search"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>

        {/* TASKS Section */}
        <div className="p-6 border-b border-gray-200">
          <h3 className="text-sm font-semibold text-gray-600 uppercase tracking-wide mb-4">TASKS</h3>
          <div className="space-y-2">
            {['Upcoming', 'Today', 'Calendar', 'Sticky Wall'].map((item, index) => (
              <button
                key={item}
                onClick={() => setSelectedList(item)}
                className={`w-full flex items-center justify-between p-3 rounded-lg text-left transition-colors ${
                  selectedList === item ? 'bg-gray-100' : 'hover:bg-gray-50'
                }`}
              >
                <div className="flex items-center space-x-3">
                  <div className="w-5 h-5 flex items-center justify-center">
                    {index === 0 && <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" /></svg>}
                    {index === 1 && <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" /></svg>}
                    {index === 2 && <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" /></svg>}
                    {index === 3 && <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /></svg>}
                  </div>
                  <span className="text-gray-800">{item}</span>
                </div>
                {index === 0 && <span className="text-sm text-gray-500">12</span>}
                {index === 1 && <span className="text-sm text-gray-500">5</span>}
              </button>
            ))}
          </div>
        </div>

        {/* LISTS Section */}
        <div className="p-6 border-b border-gray-200">
          <h3 className="text-sm font-semibold text-gray-600 uppercase tracking-wide mb-4">LISTS</h3>
          <div className="space-y-2">
            {lists.map((list) => (
              <button
                key={list.id}
                onClick={() => setSelectedList(list.name)}
                className={`w-full flex items-center justify-between p-3 rounded-lg text-left transition-colors ${
                  selectedList === list.name ? 'bg-gray-100' : 'hover:bg-gray-50'
                }`}
              >
                <div className="flex items-center space-x-3">
                  <div className={`w-3 h-3 rounded ${list.color}`}></div>
                  <span className="text-gray-800">{list.name}</span>
                </div>
                <span className="text-sm text-gray-500">{list.taskCount}</span>
              </button>
            ))}
            <button className="w-full flex items-center space-x-3 p-3 rounded-lg text-left hover:bg-gray-50 transition-colors">
              <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              <span className="text-gray-600">Add New List</span>
            </button>
          </div>
        </div>

        {/* TAGS Section */}
        <div className="p-6 border-b border-gray-200">
          <h3 className="text-sm font-semibold text-gray-600 uppercase tracking-wide mb-4">TAGS</h3>
          <div className="space-y-2">
            {tags.map((tag) => (
              <button
                key={tag.id}
                className={`w-full p-2 rounded-lg text-left transition-colors ${tag.color} hover:opacity-80`}
              >
                <span className="text-gray-800">{tag.name}</span>
              </button>
            ))}
            <button className="w-full flex items-center space-x-3 p-2 rounded-lg text-left hover:bg-gray-50 transition-colors">
              <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              <span className="text-gray-600">Add Tag</span>
            </button>
          </div>
        </div>

        {/* Bottom Links */}
        <div className="mt-auto p-6 border-t border-gray-200">
          <div className="space-y-2">
            <button className="w-full flex items-center space-x-3 p-3 rounded-lg text-left hover:bg-gray-50 transition-colors">
              <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              <span className="text-gray-800">Settings</span>
            </button>
            <button
              onClick={handleLogout}
              className="w-full flex items-center space-x-3 p-3 rounded-lg text-left hover:bg-gray-50 transition-colors"
            >
              <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
              <span className="text-gray-800">Sign out</span>
            </button>
          </div>
        </div>
      </div>

      {/* Middle Panel - Task List */}
      <div className="flex-1 bg-white border-r border-gray-200">
        {/* Header */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <button className="p-2 hover:bg-gray-100 rounded-lg">
                <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                </svg>
              </button>
              <h1 className="text-2xl font-bold text-gray-800">{selectedList}</h1>
              <span className="text-lg text-gray-500">{filteredTasks.length}</span>
            </div>
          </div>
        </div>

        {/* Add New Task */}
        <div className="p-6 border-b border-gray-200">
          <form onSubmit={handleCreateTask} className="flex items-center space-x-3">
            <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            <input
              type="text"
              placeholder="Add New Task"
              value={newTaskTitle}
              onChange={(e) => setNewTaskTitle(e.target.value)}
              className="flex-1 px-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <button
              type="submit"
              className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
            >
              Add
            </button>
          </form>
        </div>

        {/* Task List */}
        <div className="flex-1 overflow-y-auto">
          {filteredTasks.map((task, index) => (
            <div key={task.id} className="border-b border-gray-100">
              <div
                className={`p-6 hover:bg-gray-50 cursor-pointer transition-colors ${
                  selectedTask?.id === task.id ? 'bg-gray-100' : ''
                }`}
                onClick={() => setSelectedTask(task)}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <button
                      onClick={(e) => {
                        e.stopPropagation()
                        handleToggleTask(task)
                      }}
                      className={`w-5 h-5 rounded border-2 flex items-center justify-center ${
                        task.completed
                          ? 'bg-green-500 border-green-500 text-white'
                          : 'border-gray-300 hover:border-green-500'
                      }`}
                    >
                      {task.completed && (
                        <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                        </svg>
                      )}
                    </button>
                    <div className="flex-1">
                      <h3 className={`text-gray-800 ${task.completed ? 'line-through text-gray-500' : ''}`}>
                        {task.title}
                      </h3>
                      {task.dueDate && (
                        <p className="text-sm text-gray-500 mt-1">{task.dueDate}</p>
                      )}
                      {task.subtasks.length > 0 && (
                        <p className="text-sm text-gray-500 mt-1">{task.subtasks.length} Subtasks</p>
                      )}
                      {task.tags.length > 0 && (
                        <div className="flex space-x-2 mt-2">
                          {task.tags.map((tag, tagIndex) => (
                            <span
                              key={tagIndex}
                              className="px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full"
                            >
                              {tag}
                            </span>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                  <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Right Panel - Task Details */}
      <div className="w-96 bg-white">
        {selectedTask ? (
          <div className="h-full flex flex-col">
            {/* Header */}
            <div className="p-6 border-b border-gray-200">
              <h2 className="text-lg font-bold text-gray-800">Task:</h2>
              <h3 className="text-xl font-semibold text-gray-800 mt-2">{selectedTask.title}</h3>
            </div>

            {/* Task Details Form */}
            <div className="flex-1 p-6 space-y-6 overflow-y-auto">
              {/* Description */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                <textarea
                  value={selectedTask.description}
                  onChange={(e) => {
                    const updated = { ...selectedTask, description: e.target.value }
                    setSelectedTask(updated)
                    handleUpdateTask(updated)
                  }}
                  className="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                  rows={3}
                  placeholder="Add description..."
                />
              </div>

              {/* List */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">List</label>
                <select
                  value={selectedTask.list}
                  onChange={(e) => {
                    const updated = { ...selectedTask, list: e.target.value }
                    setSelectedTask(updated)
                    handleUpdateTask(updated)
                  }}
                  className="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  {lists.map((list) => (
                    <option key={list.id} value={list.name}>{list.name}</option>
                  ))}
                </select>
              </div>

              {/* Due Date */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Due date</label>
                <input
                  type="date"
                  value={selectedTask.dueDate}
                  onChange={(e) => {
                    const updated = { ...selectedTask, dueDate: e.target.value }
                    setSelectedTask(updated)
                    handleUpdateTask(updated)
                  }}
                  className="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              {/* Tags */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Tags</label>
                <div className="flex flex-wrap gap-2">
                  {selectedTask.tags.map((tag, index) => (
                    <span
                      key={index}
                      className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm"
                    >
                      {tag}
                      <button
                        onClick={() => {
                          const updated = {
                            ...selectedTask,
                            tags: selectedTask.tags.filter((_, i) => i !== index)
                          }
                          setSelectedTask(updated)
                          handleUpdateTask(updated)
                        }}
                        className="ml-2 text-blue-600 hover:text-blue-800"
                      >
                        ×
                      </button>
                    </span>
                  ))}
                  <button className="px-3 py-1 border border-gray-300 text-gray-600 rounded-full text-sm hover:bg-gray-50">
                    + Add Tag
                  </button>
                </div>
              </div>

              {/* Subtasks */}
              <div>
                <h3 className="text-sm font-medium text-gray-700 mb-3">Subtasks:</h3>
                <div className="space-y-2">
                  {selectedTask.subtasks.map((subtask) => (
                    <div key={subtask.id} className="flex items-center space-x-3">
                      <button
                        onClick={() => handleToggleSubtask(selectedTask.id, subtask.id)}
                        className={`w-4 h-4 rounded border-2 flex items-center justify-center ${
                          subtask.completed
                            ? 'bg-green-500 border-green-500 text-white'
                            : 'border-gray-300 hover:border-green-500'
                        }`}
                      >
                        {subtask.completed && (
                          <svg className="w-2 h-2" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                          </svg>
                        )}
                      </button>
                      <span className={`text-sm ${subtask.completed ? 'line-through text-gray-500' : 'text-gray-800'}`}>
                        {subtask.title}
                      </span>
                    </div>
                  ))}
                  <form
                    onSubmit={(e) => {
                      e.preventDefault()
                      const input = e.currentTarget.querySelector('input')
                      if (input?.value.trim()) {
                        handleAddSubtask(selectedTask.id, input.value.trim())
                        input.value = ''
                      }
                    }}
                    className="flex items-center space-x-2"
                  >
                    <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    <input
                      type="text"
                      placeholder="Add New Subtask"
                      className="flex-1 px-3 py-1 text-sm border border-gray-200 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </form>
                </div>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="p-6 border-t border-gray-200 space-y-3">
              <button
                onClick={() => handleDeleteTask(selectedTask.id)}
                className="w-full py-3 px-4 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors"
              >
                Delete Task
              </button>
              <button
                onClick={() => handleUpdateTask(selectedTask)}
                className="w-full py-3 px-4 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition-colors"
              >
                Save changes
              </button>
            </div>
          </div>
        ) : (
          <div className="h-full flex items-center justify-center text-gray-500">
            <div className="text-center">
              <svg className="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
              <p className="text-lg font-medium">Select a task to view details</p>
              <p className="text-sm text-gray-400 mt-1">Choose a task from the list to edit or view its details</p>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default App